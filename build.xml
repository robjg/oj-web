<project xmlns:ivy="antlib:org.apache.ivy.ant"
	default="jar" basedir="." name="Web Oddball">

	<taskdef resource="org/apache/ivy/ant/antlib.xml"
	                 uri="antlib:org.apache.ivy.ant" 
		classpath="../oj-assembly/antlibs/ivy-2.4.0.jar"/>
	
	<property environment="env"/>
	<!-- TODO: Linux -->
	<property name="typescript.compiler.path" value="${env.APPDATA}/npm/tsc.cmd"/>
	
    <!--
    Run typescript compler. Use a tsconfig.json to set compiler opitons.
	-->
	<macrodef name="TypeScriptCompileDir">
	
	    <!-- required attribute -->
	    <attribute name="src" />
	
	    <sequential>
	
	        <!-- Compile using the generated compile file -->
	        <echo message="Calling ${typescript.compiler.path} with -p @{src}" />
	    	
	        <exec dir="." executable="${typescript.compiler.path}">
	            <arg value="-p"/>
	            <arg value="@{src}"/>
	        </exec>
	
	    </sequential>
	
	</macrodef>
	
	<!-- =================================================================== -->
	<!-- Initialization target                                               -->
	<!-- =================================================================== -->
	<target name="init">

		<tstamp/>

		<!-- =================================================================== -->
		<!-- Properties                                                          -->
		<!-- =================================================================== -->

		<property file="../oj-assembly/version.properties"/>
			
		<property name="Name"     value="Web Oddball"/>
		<property name="name"     value="oj-web"/>
		<property name="build.version"  value="${project.version}"/>

		<echo message="--------------------------------------------------------------"/>
		<echo message="            ${Name} ${build.version}                                "/>
		<echo message="--------------------------------------------------------------"/>
		<echo message="Building with ${ant.version}"/>
		<echo message="using build file ${ant.file}"/>
		<echo message="--------------------------------------------------------------"/>

		<property name="debug"          value="on"/>
		<property name="optimize"       value="off"/>
		<property name="deprecation"    value="off"/>
		<property name="nowarn"         value="on"/>
		<!-- <property name="build.compiler" value="classic"/> -->

		<property name="src.dir"      	value="./src/main"/>
		<property name="src.java"     	value="${src.dir}/java"/>
		<property name="src.ts"     	value="${src.dir}/ts"/>
		<property name="src.resources"  value="${src.dir}/resources"/>
		<property name="test.dir"     	value="./src/test"/>
		<property name="test.java"     	value="${test.dir}/java"/>
		<property name="test.ts"        value="${test.dir}/ts"/>
		<property name="test.resources" value="${test.dir}/resources"/>
		<property name="work.dir"     	value="./work"/>
		<property name="lib.dir"      	value="./lib"/>

		<property name="build.dir"       	value="./build"/>
		<property name="build.src"       	value="${build.dir}/src"/>
		<property name="build.classes"   	value="${build.dir}/classes"/>
		<property name="build.test"      	value="${build.dir}/test"/>
		<property name="build.test.classes" value="${build.test}/classes"/>
		<property name="build.lib"       	value="${build.dir}/lib"/>
		<property name="build.tsc"   		value="${src.resources}/org/oddjob/webapp/scripts/oddjob.js"/>
        <property name="build.test.tsc"     value="${test.dir}/webapp/scripts"/>

		<property name="test.reports" value="${build.test}/reports"/>
		
		<property name="jar.name"        value="${name}-${build.version}.jar"/>

		<filter token="Name"    value="${Name}"/>
		<filter token="name"    value="${name}"/>
		<filter token="version" value="${build.version}"/>
		<filter token="date"    value="${TODAY}"/>
		<filter token="log"     value="true"/>
		<filter token="verbose" value="true"/>
		<filter token="reference" value="../reference"/>
		<filter token="javadoc" value="../api"/>
		<filter token="userguide" value="../userguide"/>
		<filter token="devguide" value="../devguide"/>

	</target>

	<!-- =================================================================== -->
	<!-- Prepare for the build                                               -->
	<!-- =================================================================== -->
	<target name="prepare" depends="init">

		<mkdir dir="${lib.dir}"/>
		
		<ivy:retrieve conf="default"/>
		
		<ivy:resolve conf="provided" refresh="true" />
		
		<ivy:resolve conf="test" refresh="true" />
		
		<ivy:cachepath pathid="provided-cachepath" conf="provided" />
				
		<ivy:cachepath pathid="test-cachepath" conf="test" />
			
		<path id="classpath">
			<fileset dir="${lib.dir}">
				<include name="*.jar"/>
				<exclude name="${name}*.jar"/>
			</fileset>
			<path refid="provided-cachepath"/>
		</path>

		<path id="test-classpath">
			<path refid="classpath"/>
			<pathelement path="${build.classes}" />
			<path refid="test-cachepath"/>
		</path>
		
		<mkdir dir="${build.dir}"/>

	</target>

	<!-- =================================================================== -->
	<!-- Prepares the source code                                            -->
	<!-- =================================================================== -->

	<target name="prepare-src-main" depends="prepare">

		<mkdir dir="${build.src}"/>
		<mkdir dir="${build.classes}"/>
		<copy todir="${build.src}" filtering="on">
			<fileset dir="${src.java}">
				<exclude name="**/*.gif"/>
				<exclude name="**/*.properties"/>
				<exclude name="**/*.xml"/>
			</fileset>
		</copy>
	</target>

	<!-- =================================================================== -->
	<!-- Compiles the source directory                                       -->
	<!-- =================================================================== -->
	<target name="compile" depends="prepare-src-main"
          description="Compiles the source code">

		<!-- Compile a single JavaScript file in the bin dir for release -->
	    <TypeScriptCompileDir
	        src="${src.ts}"
	    />
		
		<copy todir="${build.classes}" filtering="off">
			<fileset dir="${src.resources}">
				<include name="**/*"/>
			</fileset>
		</copy>

		<echo message="Compiling with Java ${ant.java.version}, debug ${debug}, optimize ${optimize}, deprecation ${deprecation}"/>

		<javac srcdir="${build.src}"
           destdir="${build.classes}"
           debug="${debug}"
           optimize="${optimize}"
           deprecation="${deprecation}"
           nowarn="${nowarn}">
			<classpath refid="classpath"/>
		</javac>
	</target>

	<!-- =================================================================== -->
	<!-- Creates the jar file                                                -->
	<!-- =================================================================== -->
	<target name="jar" depends="compile-tests" description="Generates the jar packages">
		
	    <jar destfile="${lib.dir}/${jar.name}"
	         basedir="${build.classes}">
	      <metainf dir="${build.dir}" includes="LICENSE.txt"/>
	    </jar>
		
	</target>

	<!-- =================================================================== -->
	<!-- Compile Tests                                                       -->
	<!-- =================================================================== -->
	
	<target name="compile-tests" depends="compile" description="Compile jUnit tests">
		<mkdir dir="${build.test}"/>

        <TypeScriptCompileDir
            src="${test.ts}"
        />

		<copy todir="${build.test.classes}" filtering="off">
			<fileset dir="${test.resources}">
				<include name="**/*"/>
			</fileset>
		</copy>
		
		<!-- Compile tests -->
		<javac srcdir="${test.java}"
            destdir="${build.test.classes}"
            debug="${debug}"
            optimize="${optimize}"
            deprecation="${deprecation}">
			<classpath>
				<path refid="test-classpath"/>
			</classpath>
		</javac>

	</target>

	<!-- =================================================================== -->
	<!-- Run Tests                                                           -->
	<!-- =================================================================== -->
	
	<target name="all-tests" depends="jar" description="Perform jUnit tests">
		<mkdir dir="${work.dir}"/>
		<mkdir dir="${test.reports}"/>
		
		<junit printsummary="yes" haltonfailure="no" 
				failureproperty="junit.failure" 
				fork="yes" forkmode="once">
			<classpath>
				<pathelement location="${build.test.classes}" />
			</classpath>
			<classpath refid="test-classpath"/>
			<batchtest todir="${test.reports}">
				<fileset dir="${build.test.classes}">
					<include name="**/test/*TestCase.class"/>
					<include name="**/*Test.class" />
					<exclude name="**/AllTest.class" />
					<exclude name="**/*$$*Test.class" />
				</fileset>
			</batchtest>
			<formatter type="xml"/>
			<sysproperty key="basedir" value="${basedir}"/>
			<sysproperty key="ant.file" value="${ant.file}"/>
		</junit>
		
		<junitreport todir="${test.reports}">
			<fileset dir="${test.reports}">
		    	<include name="TEST-*.xml"/>
			</fileset>
		    <report todir="${test.reports}"/>
		</junitreport>
		
		<fail if="junit.failure" message="Unit test(s) failed. See reports in ${test.reports}."/>	
	</target>

	<target name="single-test" depends="jar" description="Single JUnit test">
		<mkdir dir="${work.dir}"/>
			
		<junit printsummary="yes" haltonfailure="yes" fork="yes">
			<classpath>
				<pathelement location="${build.test.classes}" />
			</classpath>
			<classpath refid="test-classpath"/>
			<formatter type="plain" usefile="no" />
			<test name="${junit.test}"/>
			<sysproperty key="basedir" value="${basedir}"/>
			<sysproperty key="ant.file" value="${ant.file}"/>
		</junit>
	</target>
	
	<!-- =================================================================== -->
	<!-- Publish the jars in local ivy                                       -->
	<!-- =================================================================== -->
	<target name="install" depends="jar">
		
		<!-- Not yet implemented -->
		
	</target>
		
	<!-- =================================================================== -->
	<!-- Prepares the source distribution                                    -->
	<!-- =================================================================== -->
	<target name="dist-src" depends="init"
          description="Prepares the source distribution"
			if="dist.src.dir">

		<property name="to.dir" value="${dist.src.dir}/${name}"/>
		
		<copy todir="${to.dir}/src" filtering="off">
			<fileset dir="${src.dir}"/>
		</copy>

		<copy todir="${to.dir}">
			<fileset dir=".">
				<include name="build.xml"/>
				<include name="ivy.xml"/>
				<include name="ivysettings.xml"/>
				<include name="LICENSE.txt"/>
				<include name="README.txt"/>
			</fileset>
		</copy>

	</target>

	<!-- =================================================================== -->
	<!-- Prepares the binary distribution                                    -->
	<!-- =================================================================== -->
	<target name="dist-bin" depends="jar">
		
		<property name="to.dir"    value="${dist.bin.dir}/oddballs/${name}"/>
		<property name="to.lib"    value="${to.dir}/lib"/>
				
		<!-- The jars -->
		<copy todir="${to.lib}">
			<fileset dir="${lib.dir}">
				<include name="*.jar"/>
			</fileset>
		</copy>

	</target>
	
	<!-- =================================================================== -->
	<!-- Maven Targets			                                     -->
	<!-- =================================================================== -->
		
	<target name="maven-install"
			description="Not yet implemented">
	</target>
	
    <target name="maven-deploy" 
    	description="Not yet implemented">
    </target>
	
	<target name="maven-stage" 
		description="Not yet implemented">
	</target>
	
	<!-- =================================================================== -->
	<!-- Clean targets                                                       -->
	<!-- =================================================================== -->
	
	<target name="clean" depends="init" description="Cleans the build directories">
		<delete dir="${build.dir}"/>
		<delete>
			<fileset dir="${lib.dir}">
			 <include name="*.jar"/>
			</fileset>
		</delete>
		<delete file="${build.tsc}"/>
		<delete dir="${build.test.tsc}"/>					
	</target>

</project>

<!-- End of file -->
